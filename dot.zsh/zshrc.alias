# Common
alias reload='exec $SHELL'
alias ts='tmux split-window'
alias th='tmux split-window -h'
alias CC='gcc'
alias bi='bundle install -j $(nproc) --path=./vendor/bundle'
alias bu='bundle update -j $(nproc)'
alias quit='exit'
alias t='tmux'
alias allunigem='gem list --no-versions | grep "^[a-z]" | grep -v "bundler\|space2underscore\|space2dot\|test-unit\|rdoc\|grep\|rake\|psych\|io-console\|json\|bigdecimal\|minitest"'
alias n='noglob'
alias sp='rails s puma'
alias sl='ls'
alias pw='ping 8.8.8.8'
alias va='vagrant'
alias v='nvim'
alias vi='nvim'
alias vim='nvim'
alias gto='git open'
alias gtoa='git opena'
alias gs='git sync'
alias gsm='git syncm'
alias gsms='git syncms'
alias gsdd='git syncd'
alias gci="git commit --amend -C @"
alias tn='tmux new'
alias nt='tmux new'
alias memo='cat > /dev/null'
alias b='bundle'
alias ctags="ctags --exclude=.git --exclude=log"
alias r='rspec'
alias free='free -h'
alias o="open_command"
alias o.="open_command ."
alias t='ghi show -w $(ghi list --sort updated | grep -v "open issue" | fgrep -v "None." | peco | awk "{ print $1 }")'
alias ghqget='ghq get -p'
alias rtags="ctags -R --languages=ruby"
alias gencrypt="gpg -e -a -r sachin21dev@gmail.com"

# Allow typos
# ---------------------------------------------------**
## ggpush
alias ggps='ggpush'
alias gggps='ggpush'
alias gps='ggpush'
alias ggpuh='ggpush'

# Global
# ---------------------------------------------------**
alias -g A='| ag'
alias -g B='`git branch | peco | sed -e "s/^\*[ ]*//g"`'
alias -g L='| less'
alias -g N='> /dev/null'
alias -g NA='&> /dev/null'
alias -g S='| sort'
alias -g V="| nvim -R -"
alias -g W='| wc'
alias -g X='| xargs'
alias -g P='ps -e |'
alias -g DROP='&> /dev/null'

# Suffix
alias -s txt='cat'
alias -s rb='ruby'
alias -s py='python'
alias -s hs='runhaskell'
alias -s php='php -f'

# Projects
for project in $(command ls "$HOME/.tmuxinator"); do
  project=${project%.*}
  alias $project="tmuxinator start $project"
done
unset project

# gomi
if command_exists gomi &> /dev/null; then
  alias rm="gomi"
else
  warn "  x [Warning] gomi is not installed"
fi

# cURL
if command_exists curl; then
  CURL_OPTS=''
  CURL_OPTS+=' -H "Accept: application/json"'
  CURL_OPTS+=' -H "Content-Type: application/json"'
  CURL_OPTS+=' -H "Cache-Control: no-cache"'
  CURL_OPTS+=' -b ~/.cookies.txt -c ~/.cookies.txt'

  alias curl="curl $CURL_OPTS"
else
  warn "  x [Warning] curl is not installed"
fi

# mikutter
if command_exists mikutter; then
  alias mstart="mikutter start"
  alias mstop="mikutter stop"
  alias mrestart="mikutter restart"
else
  warn "  x [Warning] mikutter is not installed"
fi

# tig
if command_exists tig; then
  if command_exists ruby; then
    for alphabet in $(ruby -e "printf ('a'..'z').to_a.join(\"\n\")"); do
      alias "${alphabet}tig"='tig'
      alias "${alphabet}ig"='tig'
      alias "tig${alphabet}"='tig'
      alias "ti${alphabet}"='tig'
    done
  else
    warn "  x [Warning] Ruby is not installed"
  fi

  alias ti='tig'
  alias it='tig'
  alias itg='tig'
  alias ttig='tig'
  alias tigg='tig'
  alias tg='tig grep'

  unalias dig
else
  warn "  x [Warning] tig is not installed"
fi

# Secure
if command_exists openssl; then
  function encrypt() { openssl aes-256-cbc -e -in $1 -out encrypted$RANDOM.txt }
  function decrypt() { openssl aes-256-cbc -d -in $1 -out /dev/stdout }
fi

# xpanes
alias xp="xpanes"

# docker-compose
if command_exists docker-compose; then
  alias fig='docker-compose'
  alias figup='docker-compose up'
  alias figd='docker-compose -f docker-compose-dev.yml'
  alias figt='docker-compose -f docker-compose-test.yml'

  function figrm() {
    docker-compose run --rm app "$@"
  }

  function figbe() {
    figrm bundle exec "$@"
  }

  function figbi() {
    figrm bundle install -j $(echo $(($(nproc) * 2)))
  }

  function figbu() {
    figrm bundle update --jobs $(echo $(($(nproc) * 2))) "$@"
  }
fi

function remove_all_images_and_containers() {
  docker stop $(docker ps -a -q | fgrep -v CONTAINER)
  docker rm $(docker ps -a | awk '{print $1}' | fgrep -v CONTAINER)
  docker image rmi -f $(docker images | awk '{print $3}' | fgrep -v IMAGE)
  docker volume prune -f
}

# fselect
if command_exists fselect; then
  alias f='fselect'
fi

# Useful functions
# ---------------------------------------------------**
function ptvim() {
  local output

  if command_exists pt; then
    if output=$(pt "$@"); then
      if [[ $output == "" ]]; then
        return 0;
      fi

      local result=$(echo $output | peco --query "$LBUFFER")

      if [[ ! $result == '' ]]; then
        echo $result | awk -F : '{print "-c " $2 " " $1}' >> $HOME/.ptvim_history
        vim $(tail -n 1 "$HOME"/.ptvim_history)
      fi
    else
      echo $output
    fi
  else
    warn "  x [Warning] The Platinum Searcher is not installed"
  fi
}

function _change-repository() {
  local result=$(ghq list | peco)

  if [[ ! "$result" == '' ]]; then
    cd "$HOME/Projects/$result"
  fi
}

function _peco-select-history() {
  if ! command_exists tac; then
    if command_exists gtac; then
      alias tac='gtac'
    else
      warn "  x [Warning] tac is not installed"

      return 1
    fi
  fi

  local BUFFER=$(\history -n 1 | \
    tac | \
    awk '!x[$0]++' | \
    peco --query "$LBUFFER")
  CURSOR="$#BUFFER"

  zle clear-screen
}

function _peco-select-project() {
  if command_not_exists tmuxinator; then
    fail '  x [Warning] The Tmuxinator is not installed'; return 1
  fi

  local LF=$(printf '\\\012_')
  local LF=${LF%_}
  local project=$(tmuxinator list | tail -n 1 | sed -e 's/ /'"\n"'/g' | grep -v '^\s*$' | peco)

  tmuxinator "$project"
}

function _peco-git-branch(){
  local branch_name=$(git branch | grep -v "*" | peco | sed -e 's/ //g' | head -c -1)
  git checkout $branch_name
}

function python-listup() {
  local version=$(pyenv install --list | peco | sed -e 's/^  *//g' | tr -d '\n" "' | head -c -1)

  if [[ $version != '' ]]; then
    is_linux && echo $version || echo $version C
  else
    fail "  x [Error] Failed to output or copy"
  fi
}

function ruby-listup() {
  local version=$(rbenv install --list | peco | sed -e 's/^  *//g' | tr -d '\n" "')

  if [[ $version != '' ]]; then
    is_linux && echo $version || echo $version C
  else
    fail "  x [Error] Failed to copy to the clipboard"
  fi
}

function ec() {
  git commit -m "Execute \`$@\`"
}

function _peco-find-and-open-file() {
  if [[ $1 == '' ]]; then
    local target='.'
  else
    local target=$1
  fi

  local targets=$(find $target | fgrep -v '.git' | fgrep -v './vendor/bundle' | peco)

  if [[ ! $targets == '' ]]; then
    nvim $(echo $targets)
  fi
}

function _peco-find-and-open-file-with-binding() {
  _peco-find-and-open-file
  zle clear-screen
}

function fs() {
  if [[ -f Procfile.dev ]]; then
    bundle exec foreman start --procfile Procfile.dev
  elif [[ -f Procfile ]]; then
    bundle exec foreman start --procfile Procfile
  else
    warn "  x [Warning] Procfile is not found"
  fi
}

function _kill-ps-with-peco() {
  for pid in $(ps aux | peco | awk '{ print $2 }'); do
    sudo kill -9 $pid
  done
}

function _cd-gem-sred_the_gem() {
  if ! [ -d "$HOME/src" ]; then
    warn "x [Warning] gem-src is not installed well"
    return 1
  fi

  local result=$(ls "$HOME/src" | xargs -I% echo "$HOME/src/%")
}

function _tw() {
  if ! type tw &> /dev/null; then
    warn "x [Warning] tw is not installed"
    return 1
  fi

  code="$(cat /dev/urandom | base64 | fold -w 3 | head -n 1)"

  ask "  + Please enter this code if you confirm to Tweet this\n\nTweet body: "$@"\nConfirmation code: $code" && read -r input

  if [ "$input" = "$code" ]; then
    tw "$@"
  else
    fail '  x [Error] The code is not matched'
  fi
}

function _draft-tweets() {
  if ! type tw &> /dev/null; then
    warn "x [Warning] tw is not installed"
    return 1
  fi

  if ! command_exists tac; then
    if command_exists gtac; then
      alias tac='gtac'
    else
      warn "  x [Warning] tac is not installed"

      return 1
    fi
  fi

  local BUFFER=$(\history -n 1 | \
    tac | \
    awk '!x[$0]++' | \
    grep -F 'tw' | \
    grep -F "[draft]" | \
    peco | \
    sed 's/.*\[draft\]\s//g')

  CURSOR="$#BUFFER"

  zle clear-screen
}

function secure_remove() {
  local files=$(find $@ -type f)

  echo $files | xargs -I% shred -n 5 %
  echo $files | xargs -I% shred -z   %

  command rm -fr $@
}

# Set zle
# ---------------------------------------------------**
zle -N _peco-select-history
zle -N _peco-find-and-open-file-with-binding
zle -N _draft-tweets

# Bind functions
# ---------------------------------------------------**
bindkey '^r' _peco-select-history
bindkey '^_' undo
bindkey '^x' _peco-find-and-open-file-with-binding
bindkey '^[' _draft-tweets

# Alias functions
# ---------------------------------------------------**
alias p='_peco-select-project'
alias c='_change-repository'
alias br='_peco-git-branch'
alias pk='_kill-ps-with-peco'
alias agvim='ptvim'
alias x='_peco-find-and-open-file'
alias tw='_tw'
alias dt='_draft-tweets'
alias ssrm='secure_remove' # Super Secure RemMve (SSRM)
